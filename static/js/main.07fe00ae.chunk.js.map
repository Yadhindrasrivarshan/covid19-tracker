{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","images/image.png","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","image","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07fe00ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__25Sw8\",\"card\":\"Cards_card__3XTwZ\",\"infected\":\"Cards_infected__33mq1\",\"recovered\":\"Cards_recovered__3kPSj\",\"deaths\":\"Cards_deaths__2Y9U6\"};","import axios from 'axios'\r\n\r\nconst url=\"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData=async(country)=>{\r\n    let changeableUrl=url \r\n    if(country){\r\n        changeableUrl=`${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n        const {data: {confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableUrl)\r\n\r\n        return {confirmed,recovered,deaths,lastUpdate}\r\n\r\n\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetchDailyData=async()=>{\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`)\r\n           \r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }))\r\n        return modifiedData\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries=async()=>{\r\n\r\n\r\n\r\n    try{\r\n         const {data:{countries}}=await axios.get(`${url}/countries`)\r\n\r\n         return countries.map((country)=>country.name)\r\n\r\n\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nimport CountUp from 'react-countup'\r\n\r\nimport cx from 'classnames'\r\n\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nconst Cards=({data: {confirmed,recovered,deaths,lastUpdate}})=>{\r\n\r\n\r\n    if(!confirmed){\r\n        return <h1>Loading</h1>\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                              start={0}\r\n                              end={confirmed.value}\r\n                              duration={2.5}\r\n                              seperator=','\r\n                            />\r\n\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of Active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                              start={0}\r\n                              end={recovered.value}\r\n                              duration={2.5}\r\n                              seperator=','\r\n                            />\r\n\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                              start={0}\r\n                              end={deaths.value}\r\n                              duration={2.5}\r\n                              seperator=','\r\n                            />\r\n\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Cards","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api'\r\n\r\nimport {Line,Bar} from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css'\r\nconst Chart=({data:{confirmed,recovered,deaths},country})=>{\r\n    const [dailyData,setDailyData]=useState([])\r\n    useEffect(()=>{\r\n        const fetchAPI=async()=>{\r\n            setDailyData(await fetchDailyData())\r\n             \r\n        }\r\n        fetchAPI()\r\n    },[])\r\n\r\n    const lineChart=(\r\n      dailyData.length!=0 ? (<Line data={{\r\n           labels:dailyData.map(({date})=>date),\r\n           datasets:[{\r\n              data: dailyData.map(({confirmed})=>confirmed),\r\n              label:'Infected',\r\n              borderColor:'#3333ff',\r\n              fill:true,\r\n\r\n           },{ \r\n               data: dailyData.map(({deaths})=>deaths),\r\n               label:'deaths',\r\n               borderColor:'red',\r\n               backgroundColor:'rgba(255,0,0,0.5)',\r\n               fill:true,\r\n           }],\r\n       }}\r\n       />):null\r\n    )\r\n\r\n    const barChar=(\r\n         confirmed? (\r\n            <Bar\r\n            \r\n            data={{\r\n               labels:['Infected','Recovered','Deaths'],\r\n               datasets:[{\r\n                  label:'People',\r\n                  backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                  data:[confirmed.value,recovered.value,deaths.value]\r\n\r\n               }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current Country is  ${country}`}\r\n            }}\r\n            \r\n            \r\n            />\r\n        ): null\r\n    )\r\n    return(\r\n        <div className={styles.container}>\r\n            {country? barChar:lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart","import React,{useState,useEffect} from 'react';\r\nimport styles from './CountryPicker.module.css'\r\n\r\n\r\nimport {fetchCountries} from '../../api'\r\nimport {NativeSelect,FormControl} from '@material-ui/core' \r\nconst CountryPicker=({handleCountryChange})=>{\r\n     const [fetchedCountries,setFetchedCountries]=useState([])\r\n    useEffect(()=>{\r\n       const fetchAPI=async()=>{\r\n           setFetchedCountries(await fetchCountries())\r\n       }\r\n\r\n       fetchAPI() \r\n    },[setFetchedCountries])\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"global\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker","import React, { Component } from 'react'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api'\r\nimport image from './images/image.png';\r\n\r\nimport {Cards,Chart,CountryPicker} from './components'\r\nclass App extends Component {\r\n    state={\r\n        data:{},\r\n        country:'',\r\n    }\r\n   async componentDidMount(){\r\n        const fetchedData=await fetchData()\r\n        this.setState({data:fetchedData })\r\n    }\r\n\r\n    handleCountryChange=async(country)=>{\r\n      const fetchedData=await fetchData(country)\r\n\r\n      this.setState({data:fetchedData,country:country})\r\n    }\r\n    render() {\r\n\r\n        const {data,country}=this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={image} className=\"image\" alt=\"COVID-19\"/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default  App ","import react from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(<App/>,document.getElementById(\"root\"))\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3b7Og\",\"image\":\"App_image__1nDJc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__vRuXw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1M-eX\"};"],"sourceRoot":""}